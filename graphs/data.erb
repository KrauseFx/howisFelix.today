---
layout: page
status: publish
title: whereisFelix.today?
type: page
published: true
meta: {}
---

{% include instapipe.html %}
<script type="text/javascript">
  let url = "https://where-is-felix-today-backend.herokuapp.com/api.json"

  function daysAgo(date) {
    const deltaDays = Math.floor((Date.now() - date.getTime()) / (1000 * 3600 * 24));
    if (deltaDays === 0) {
      return "today";
    } else if (deltaDays === 1) {
      return "yesterday";
    } else {
      return deltaDays + " days ago";
    }
  }
  function daysOrHoursAgo(date) {
    if (daysAgo(date) == "today") {
      const hours = Math.floor((Date.now() - date.getTime()) / (1000 * 3600));
      if (hours == 1) { return "1 hour ago"; }
      else if (hours < 1) { return "less than an hour ago"; }
      else { return hours + " hours ago"; }
    } else {
      return daysAgo(date);
    }
  }

  httpGetAsync(url, function(data) {
    const otherFxLifeData = data["otherFxLifeData"]

    // Render map
    document.getElementById("currentLocationMap").style.background = "url('" + data["mapsUrl"] + "') no-repeat"

    // Render current & next locations
    if (data["isMoving"] == false) {
      document.getElementById("isMovingContainer").style.display = "none"
      document.getElementById("currentCityB").innerHTML = data["currentCityText"]
    } else {
      document.getElementById("currentCityContainer").style.display = "none"
      document.getElementById("nextCityB").innerHTML = data["currentCityText"]
    }
    if (data["nextCityText"]) {
      document.getElementById("nextCityText").innerHTML = data["nextCityText"]
      document.getElementById("nextCityTime").innerHTML = data["nextCityDate"]
      document.getElementById("nextCityContainer").style.display = "block"
    }

    if (data["nextStays"].length > 0) {
      // Iterate over all the next stays, and append a new tr to the table
      for (let i = 0; i < data["nextStays"].length; i++) {
        const stay = data["nextStays"][i]
        const tr = document.createElement("tr")
        const td = document.createElement("td")
        td.innerHTML = stay["name"].replace("United States", "USA")
        tr.appendChild(td)
        const td2 = document.createElement("td")
        td2.innerHTML = new Date(stay["fromDate"]).toLocaleDateString("en-US", {day: 'numeric', month: 'short'})
        tr.appendChild(td2)
        const td3 = document.createElement("td")
        td3.innerHTML = new Date(stay["toDate"]).toLocaleDateString("en-US", {day: 'numeric', month: 'short'})
        tr.appendChild(td3)
        document.getElementById("next-cities-table").appendChild(tr)
      }
      document.getElementById("next-cities-table").style.display = "inline"
    }

    // Render today's metadata
    document.getElementById("current-weight").innerHTML = 
      "<span class='highlighted'>" + (otherFxLifeData["weight"]["value"] * 0.453592).toFixed(1) + " kg</span>/ " +
      (otherFxLifeData["weight"]["value"]).toFixed(1) + " lbs"
    document.getElementById("current-weight-time").innerHTML = "(" + daysAgo(new Date(otherFxLifeData["weight"]["time"])) + ")"
    document.getElementById("current-sleep-duration").innerHTML =
      "<span class='highlighted'>" + otherFxLifeData["sleepDurationWithings"]["value"] + " hours</span> <span class=\"ago-subtle\">(tonight)</span>"
    document.getElementById("last-workout").innerHTML = daysAgo(new Date(otherFxLifeData["gym"]["time"]))
    document.getElementById("last-meditated").innerHTML = daysAgo(new Date(otherFxLifeData["meditated"]["time"]))
    document.getElementById("data-points").innerHTML = otherFxLifeData["totalAmountOfEntries"]["value"].toLocaleString()
    document.getElementById("data-entries-count").innerHTML = otherFxLifeData["totalAmountOfEntries"]["value"].toLocaleString() + " data entries"
    document.getElementById("total-computer-time").innerHTML = otherFxLifeData["totalComputerUsageHours"]["value"].toLocaleString() + " hours"
    document.getElementById("inbox-count").innerHTML = otherFxLifeData["emailsInbox"]["value"].toLocaleString() + " emails"
    document.getElementById("trello-count").innerHTML = data["numberOfTodoItems"].toLocaleString() + " tasks"

    // Overview of data sources
    document.getElementById("h-rescuetime").innerHTML = otherFxLifeData["rescue_time"]["value"].toLocaleString()
    document.getElementById("h-swarm").innerHTML = otherFxLifeData["swarm"]["value"].toLocaleString()
    document.getElementById("h-timeranges").innerHTML = otherFxLifeData["timeRanges"]["value"].toLocaleString()
    document.getElementById("h-weather").innerHTML = otherFxLifeData["weather"]["value"].toLocaleString()
    document.getElementById("h-health").innerHTML = otherFxLifeData["dailySteps"]["value"].toLocaleString()

    document.getElementById("h-manually").innerHTML = (otherFxLifeData["totalAmountOfEntries"]["value"] - 
          otherFxLifeData["rescue_time"]["value"] -
          otherFxLifeData["swarm"]["value"] - 
          otherFxLifeData["timeRanges"]["value"] - 
          otherFxLifeData["weather"]["value"] - 
          otherFxLifeData["dailySteps"]["value"]).toLocaleString();

    // Git Details
    document.getElementById("git-time-ago").innerHTML = daysOrHoursAgo(new Date(data["lastCommitTimestamp"]))
    document.getElementById("git-link").href = data["lastCommitLink"]
    document.getElementById("git-link").innerHTML = data["lastCommitMessage"]
    document.getElementById("git-repo-link").href = "https://github.com/" + data["lastCommitRepo"]
    document.getElementById("git-repo-link").innerHTML = data["lastCommitRepo"]

    // Mood
    document.getElementById("current-feeling").innerHTML = data["currentMoodLevel"] + " " + data["currentMoodEmoji"]
    document.getElementById("mood-hours-ago").innerHTML = "(" + data["currentMoodRelativeTime"] + ")"

    // Render food data (if available)
    if (data["todaysMacros"]["kcal"] > 0) {
      document.getElementById("todaysMacros-kcal").innerHTML = data["todaysMacros"]["kcal"] + " kcal"
      const totalKcal = otherFxLifeData["macrosCarbs"]["value"] * 4 + otherFxLifeData["macrosProtein"]["value"] * 4 + otherFxLifeData["macrosFat"]["value"] * 9;
      document.getElementById("total-kcal").innerHTML = totalKcal

      document.getElementById("todaysMacros-carbs").innerHTML = data.todaysMacros.carbs + "g carbs"
      document.getElementById("todaysMacros-protein").innerHTML = data.todaysMacros.protein + "g protein"
      document.getElementById("todaysMacros-fat").innerHTML = data.todaysMacros.fat + "g fat"

      document.getElementById("macrosCarbs-value").innerHTML = data.otherFxLifeData["macrosCarbs"]["value"]
      document.getElementById("macrosProtein-value").innerHTML = data.otherFxLifeData["macrosProtein"]["value"]
      document.getElementById("macrosFat-value").innerHTML = data.otherFxLifeData["macrosFat"]["value"]


      document.getElementById("todaysMacros-kcal-bar-inner").style.width = Math.min(100, Math.round((data["todaysMacros"]["kcal"] / totalKcal) * 100)) + "%"
      document.getElementById("todaysMacros-protein-bar-inner").style.width = Math.min(100, Math.round((data.todaysMacros.protein / data.otherFxLifeData["macrosProtein"]["value"]) * 100)) + "%"
      document.getElementById("todaysMacros-carbs-bar-inner").style.width = Math.min(100, Math.round((data.todaysMacros.carbs / data.otherFxLifeData["macrosCarbs"]["value"]) * 100)) + "%"
      document.getElementById("todaysMacros-fat-bar-inner").style.width = Math.min(100, Math.round((data.todaysMacros.fat / data.otherFxLifeData["macrosFat"]["value"]) * 100)) + "%"

      // Turn the bars red when too high
      if (data.todaysMacros.protein > data.otherFxLifeData["macrosProtein"]["value"]) {
        document.getElementById("todaysMacros-protein-bar-inner").style.background = "red";
      }
      if (data.todaysMacros.carbs > data.otherFxLifeData["macrosCarbs"]["value"]) {
        document.getElementById("todaysMacros-carbs-bar-inner").style.background = "red";
      }
      if (data.todaysMacros.fat > data.otherFxLifeData["macrosFat"]["value"]) {
        document.getElementById("todaysMacros-fat-bar-inner").style.background = "red";
      }
      if (data["todaysMacros"]["kcal"] > totalKcal) {
        document.getElementById("todaysMacros-kcal-bar-inner").style.background = "red";
      }

      // Render the food list
      let foodEntriesTable = document.getElementById("foodEntriesTable")
      foodEntriesTable.innerHTML = ""
      for (let i = 0; i < data.todaysFoodItems.length; i++) {
        let foodItem = data.todaysFoodItems[i]
        let row = document.createElement("tr")
        row.className = i >= 3 ? "hidden-food" : ""
        row.style.display = i >= 3 ? "none" : ""
        const amount = foodItem.amount.split("/")[0] // Sometimes mfp has weird slashes, with the units ending up too long
        row.innerHTML = "<td>" + foodItem.name + "</td><td>" + amount + "</td>"
        foodEntriesTable.appendChild(row)
      }
      if (data.todaysFoodItems.length > 3) {
        let row = document.createElement("tr")
        row.className = "show-more-food"
        row.innerHTML = "<td colspan='2'><a onclick='toggleFood()' id='show-all-food-a'>Show all food entries</a></td>"
        foodEntriesTable.appendChild(row)
      }
    } else {
      document.getElementById("food-container").style.display = "none"
    }

    // Render the most recent social media photos
    var photos = data["recentPhotos"]
    var personalCarousel = document.getElementById("personalCarousel")
    for (let photoIndex in photos) {
      let currentPhoto = photos[photoIndex]

      var linkNode = document.createElement("a");
      linkNode["href"] = currentPhoto["link"] || "https://instagram.com/krausefx"
      linkNode["target"] = "_blank"
      var imageNode = document.createElement("span")
      imageNode["style"] = "background-image: url(" + currentPhoto["url"] + ")"
      imageNode["alt"] = currentPhoto["text"]

      linkNode.appendChild(imageNode)
      personalCarousel.appendChild(linkNode)
    }

    document.getElementById("realTimeDataDiv").style.display = "block"

    while (document.getElementsByClassName("blurred").length > 0) {
      document.getElementsByClassName("blurred")[0].classList.remove("blurred")
    }
  })

  function httpGetAsync(url, callback) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function() { 
        if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
            callback(JSON.parse(xmlHttp.responseText));
        }
    }
    xmlHttp.open("GET", url, true);
    xmlHttp.send(null);
  }
  function toggleFood() {
    // Iterate over all `hidden-food` rows and toggle their display
    let rows = document.getElementsByClassName("hidden-food")
    for (let i = 0; i < rows.length; i++) {
      rows[i].style.display = rows[i].style.display == "none" ? "table-row" : "none"
    }
    const a = document.getElementById("show-all-food-a")
    a.innerHTML = a.innerHTML == "Show all food entries" ? "Hide food entries" : "Show all food entries"
  }

  // Now, add an additional ? to the URL to make it look whereisfelix.today?
  // By modifying the GET parameters
  window.history.replaceState(null, null, "?");
</script>

<div id="mapsContainer">
  <img id="currentLocationMap">
</div>
<div id="story-available" class="story-not-available">
  <img id="storyProfilePicture" src="assets/FelixKrauseCropped.jpg" onclick="showStories()" />
</div>

<div id="realTimeDataDiv">
  <h2 id="currentCityContainer"><a id="fx-user-link" href="https://twitter.com/KrauseFx">Felix</a> is currently in <b id="currentCityB" class="highlighted blurred">Vienna, AT</b></h2>
  <h3 id="isMovingContainer" style="display: none"><a id="fx-user-link" href="https://twitter.com/KrauseFx">Felix</a> is currently heading to <b id="nextCityB" class="highlighted"></b></h3>
  <h4 id="nextCityContainer" style="display: none">Leaving for <span id="nextCityText"></span> <span id="nextCityTime"></span></h4>

  <table id="next-cities-table" cellspacing="0" cellpadding="0">
    <thead>
        <tr>
            <th>Upcoming trips</th>
            <th>From</th>
            <th>To</th>
        </tr>
    </thead>
  </table>

  <hr />
  <h3 id="feels-h">
    Felix feels <span class="highlighted blurred" id="current-feeling">happy, excited 😃</span>
    <span id="mood-hours-ago" class="ago-subtle blurred">(3 hours ago)</span>
  </h3>
  <hr />

  <div id="food-container">
    <h3>Felix ate today</h3>
    <div class="food-overview blurred">
      <div>
        <span class="highlighted" id="todaysMacros-kcal">54kcal</span> of <span id="total-kcal">2920 </span>
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-kcal-bar-inner"></div>
        </span>
      </div>
      <div>
        <span class="highlighted" id="todaysMacros-carbs">54g carbs</span> of <span id="macrosCarbs-value">350</span>g
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-carbs-bar-inner"></div>
        </span>
      </div>
      <div>
        <span class="highlighted" id="todaysMacros-protein">24g protein</span> of <span id="macrosProtein-value">200</span>g
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-protein-bar-inner"></div>
        </span>
      </div>
      <div>
        <span class="highlighted" id="todaysMacros-fat">16g fat</span> of <span id="macrosFat-value">80</span>g
        <span class="macro-bar-outer">
          <div class="macro-bar-inner" id="todaysMacros-fat-bar-inner"></div>
        </span>
      </div>
    </div>

    <div id="foodEntries" class="blurred">
      <table id="foodEntriesTable" cellspacing="0" cellpadding="0">
        <tr><td>Club Mate</td><td>500 ml</td></tr>
        <tr><td>Chicken Breast</td><td>500c</td></tr>
        <tr><td>Rice</td><td>200g</td></tr>
        <tr class="show-more-food"><td colspan='2'><a onclick='' id='show-all-food-a'>Show all food entries</a></td></tr>
      </table>
    </div>
    <hr />
  </div>

  <div id="table-container">
    <table id="real-time-table" cellspacing="0" cellpadding="0">
      <tr>
        <td>Weight</td>
        <td>
          <span id="current-weight" class="blurred"><span class="highlighted">81.8kg</span> / 180.4lbs</span>
          <span id="current-weight-time" class="ago-subtle blurred">today</span>
        </td>
      </tr>
      <tr>
        <td>Height</td>
        <td>
          <span class="blurred"><span class="highlighted">1.93m</span> (6'4")</span>
        </td>
      </tr>
      <tr>
        <td>Slept</td>
        <td id="current-sleep-duration" class="blurred"><span class="highlighted">9 hours</span> <span class="ago-subtle">(tonight)</span></td>
      </tr>
      <tr>
        <td>Last Workout</td>
        <td><span class="highlighted blurred" id="last-workout">2 days ago</span></td>
      </tr>
      <tr>
        <td>Computer Time</td>
        <td>
          <span class="highlighted blurred" id="total-computer-time">12,677 hours</span>
          <span class="ago-subtle blurred">(since 2013)</span>
        </td>
      </tr>
      <tr>
        <td>Last Meditated</td>
        <td><span class="highlighted blurred" id="last-meditated">yesterday</span></td>
      </tr>
      <tr>
        <td>Inbox</td>
        <td><span class="highlighted blurred" id="inbox-count">40 emails</span></td>
      </tr>
      <tr>
        <td>Personal Todo Items</td>
        <td><span class="highlighted blurred" id="trello-count">173 tasks</span></td>
      </tr>
      <tr>
        <td>Database size</td>
        <td><span class="highlighted blurred" id="data-entries-count">380,000 data entries</span></td>
      </tr>
    </table>
  </div>

  <hr />

  <h2 style="margin-top: -20px;">Most recent photos</h2>
  <div class="imageCarousel" id="personalCarousel"></div>
  <hr />

  <p style="margin-top: -25px;" class="git-footnote" style="margin-bottom: -10px; margin-top: -20px;">Last code commit: <span id="git-time-ago" class="blurred git-footnote">an hour ago</span></p>
  <h3 id="git-header">
    <a target="_blank" href="" id="git-link" class="blurred">Improve design of graph</a>
  </h3>
  <p class="git-footnote" style="margin-bottom: 0px; margin-top: -10px;">on GitHub repo <a target="_blank" href="" id="git-repo-link" class="blurred">KrauseFx/krausefx.com</a></p>
  <hr />
</div>

<h1>My whole life in a single database</h1>

As part of the [FxLifeSheet project](https://github.com/KrauseFx/FxLifeSheet), I created back in 2019, I started collecting all kinds of metrics about my life.
Every single day for the last 2.5 years I tracked over 100 different data types - ranging from fitness & nutrition to social life, computer usage and weather.

<div class="social-media-list" style="float: right; margin-top: 8px; margin-left: 15px;">
  <p>
    <b>Ideas or suggestions?</b><br />
    <span class="ideas-subtitle">I'd love to hear from you!</span>
  </p>
  <ul>
    <li>{% include icon-twitter.html username="KrauseFx" %}</li>
    <li>{% include icon-instagram.html %}</li>
    <li>{% include icon-url.html %}</li>
  </ul>
</div>

**The goal of this project was to answer questions about my life, like**

- How does living in different cities affect other factors like fitness, productivity and happiness?
- How does sleep affect my day, my fitness level, and happiness?
- How does the weather, and the different seasons affect my life?
- Are there any trends over the last few years?
- How does computer time, work and hours in meetings affect my personal life?

Currently, I have <b><span id="data-points">~380,000</span> data points</b>, with the biggest data sources being:

<table id="data-sources-overview">
  <tr><th>Data Source</th><th>Number of data entries</th><th>Type of data</th></tr>
  <tr><td><a href="https://rescuetime.com" target="_blank">RescueTime</a></td><td><span class="highlighted" id="h-rescuetime">149,466</span></td><td>Daily computer usage (which website, which apps)</td></tr>
  <tr><td><a href="https://swarmapp.com" target="_blank">Foursquare Swarm</a></td><td><span class="highlighted" id="h-swarm">126,285</span></td><td>Location and POI data, places I've visited</td></tr>
  <tr><td>Manually entered</td><td><span class="highlighted" id="h-manually">67,031</span></td><td>Fitness, mood, sleep, social life, health, nutrition, energy levels, TV, stress, ...</td></tr>
  <tr><td>Manually entered date ranges</td><td><span class="highlighted" id="h-timeranges">19,273</span></td><td>Occupation, lockdown status, living setup</td></tr>
  <tr><td>Weather API</td><td><span class="highlighted" id="h-weather">15,442</span></td><td>Temperature, rain, sunlight, wind</td></tr>
  <tr><td>Apple Health</td><td><span class="highlighted" id="h-health">3,048</span></td><td>Steps data</td></tr>
</table>

The domain [`whereisfelix.today`](https://whereisfelix.today) started as a joke: whenever my friends asked me when I'd be back in NYC or San Francisco, I'd send them this link containing only my upcoming travel schedule.

**Key decisions for this project:**

- Use a single database, owned and hosted by me, with all the data I've collected over the years
- Be able to [easily add and remove questions](https://github.com/KrauseFx/FxLifeSheet/blob/master/lifesheet.json) on the fly, as I learn what's beneficial to track
- Full control of how the data is visualized
- Works well for frequent flyers with mixed time zones
- 100% [fully open source](https://github.com/KrauseFx/FxLifeSheet), MIT licensed and self-hosted

I selected <span class="highlighted"><%= all_data.count %></span> graphs to show publicly on this page. For privacy reasons, and to prevent any accidental data leaks, the graphs below are snapshots taken on a given day.

<p class="graph-overview-footer">
  Note: some graphs were created using third party services or apps, however most were generated using my <a href="https://github.com/KrauseFx/FxLifeSheet/tree/master/visual_playground">own visualization code</a> using plotly.js.
</p>

<%
def convert_markdown_to_html_links(string)
  highlight_bold(string).gsub(/\[([^\]]+)\]\(([^\)]+)\)/) do |match|
    "<a href='#{$2}' target='_blank'>#{$1}</a>"
  end
end
def highlight_bold(string)
  # Convert all **bold** to <span class='highlighted'>bold</span>
  string.gsub(/\*\*(.*?)\*\*/) { "<span class='highlighted'>#{$1}</span>" }
end
%>

<div id="graphs-container">
  <% all_data.each do |entry| %>
    <% filter = "graphs/screens/#{entry["id"]}." %>
    <% img_url = Dir["#{filter}png", "#{filter}jpg"].first %>
    <% raise "Screenshot '#{entry["id"]}' doesn't exist" if img_url.nil? %>

    <div class="graphs-entry" id="graphs-entry-<%= entry["id"] %>">
      <h3><%= convert_markdown_to_html_links(entry.fetch("title")) %></h3>
      <p class="graph-description">
        <%= convert_markdown_to_html_links(entry["description"]) %>
      </p>

      <ul>
        <% Array(entry["takeaways"]).each do |takeaway| %>
          <li><%= convert_markdown_to_html_links(takeaway) %></li>
        <% end %>
      </ul>

      <span class="graph-sources">
        <span class="graph-sources-header">
          Sources: 
        </span>
        <%= Array(entry["source"]).join(", ") %>
      </span>

      <div class="image-container">
        <img src="<%= img_url %>" class="image-link" alt="<%= entry["title"] %>" onclick="enlargeImage(this, '<%= img_url %>', '<%= entry["title"] %>')" />
      </div>

      <span class="graph-date"><%= entry.fetch("years") %> years of data - Last updated on <%= entry.fetch("updated") %></span>
    </div>
  <% end %>
</div>

<h3 style="margin-top: 15px;">More Details on how this works</h3>

This project is custom-built for my own personal use, the resulting code is 100% open source on <a href="https://github.com/KrauseFx/FxLifeSheet">KrauseFx/FxLifeSheet</a>.
There are 3 components to this project:

<b>&#8226; Database</b>

A timestamp-based key-value database of all data entries powered by Postgres. This allows me to add and remove questions on-the-fly.

<img src="/graphs/assets/fxlifesheet-database.png" />

Each row has a `timestamp`, `key` and `value`. 

- The `timestamp` is the time for which the data was recorded for. This might differ from `imported_at` which contains the timestamp on when this entry was created. Additionally I have a few extra columns like `yearmonth` (e.g. 202010), which makes it easier and faster for some queries and graphs.
- The `key` describes **what** is being recorded (e.g. `"weight"`, `"locationLat"`, `"mood"`). This can be any string, and I can add and remove keys easily on the fly in the [FxLifeSheet configuration file](https://github.com/KrauseFx/FxLifeSheet/blob/master/lifesheet.json) without having to modify the database.
- The `value` is the actual value being recorded. This can be any number, string, boolean, etc. 

Early on in the project I made the decision not to associate an entry to a specific day due to complexities when traveling and time zones, since the idea was just to detect trends using the collected data. It became clear that detecting trends is only a small part of what can be done with the data, so I [wrote a script](https://github.com/KrauseFx/FxLifeSheet/tree/master/ruby_importers/importers/tag_days) to associate each entry to the correct date.


<b>&#8226; Data Inputs</b>

<img src="/graphs/assets/fxlifesheet-questions.png" id="lifesheet-questions" />

Multiple times a day, I manually answer questions [FxLifeSheet](https://github.com/KrauseFx/FxLifeSheet) sends me via a Telegram bot, which range from fitness-related questions (e.g. nutrition, exercise, sleep, etc.) to questions about my life (e.g. how I'm feeling, how much time I spend on social media, etc.).
The [Telegram API](https://core.telegram.org/) is excellent, and even allows you to customize the keyboard to have predefined replies based on the question asked.

Additionally I can fill-out date ranges with specific values, for example lockdown periods, and bulking/cutting fitness seasons.

<b>&#8226; Data Visualizations</b>

After having tried various tools available to visualize, I ended up writing my own data analysis layer using Ruby, JavaScript together with [Plotly](https://plotly.com/javascript/). You can find the full source code on [KrauseFx/FxLifeSheet - visual_playground](https://github.com/KrauseFx/FxLifeSheet/tree/master/visual_playground).

<hr style="margin-top: 30px; margin-bottom: 20px" />

<h2>Conclusion</h2>

I've always been fascinated by tracking my own data, and seeing it visualized somehow. Ever since I was young I asked myself questions like `How many steps did I walk in my life?`, and `Did I turn right more often or left?`.

Having read many articles on [r/QuantifiedSelf/](https://old.reddit.com/r/QuantifiedSelf/) and alike, I really loved the visualizations, but disliked the fact that almost all solutions were data-silos (e.g. standalone iOS apps, Gyroscope, ...) without having full control over the data as well as how it is visualized. Since collecting this amount of data over a long period of time (multiple years), you can hardly rely on any startup, or small service/app to do that job, since chances of the company shutting down the project are too high.
Additionally, the way you want to visualize the data is highly personal, and every person will have very different needs on what data to track, as well as how you want it to be analyzed.

Apple was in a great position to improve the current state with Apple Health, but they completely failed with their implementation on both the APIs, as well as the actual Health app.

One aspect I underestimated is the number of days you will track: If you want to look into how many steps you walked in a given city, you'll quickly notice the number of days in each city already being quite low. You'd then also slice the data by season or temperature, since you naturally walk less on very cold days, ending up with only a handful of days outside your main residence.

Overall, having spent a significant amount of time building this project, scaling it up to the size it's at now, as well as analysing the data, <span class="highlighted">the main conclusion is that it is not worth building your own solution, and investing this much time.</span>

I'll likely continue tracking my mood, as well as a few other key metrics, however will significantly reduce the amount of time I invest.

I'm very happy I've built this project in the first place, as it gave me a much better awareness of everything going on in my life. I'm excited to have built this website to wrap-up this project and show-case some of the outcomes.

<hr style="margin-top: 10px;" />

<footer>
  <p>
      Fork this page <a href="https://github.com/krausefx/whereisfelix.today" target="_blank">on GitHub</a>
  </p>
  <p>
      Trip data comes from <a href="https://nomadlist.com/@krausefx" target="_blank">nomadlist.com</a>
  </p>
  <p>
      Data comes from <a href="https://github.com/KrauseFx/FxLifeSheet" target="_blank">FxLifeSheet</a>
  </p>
  <p>
      How do I travel? <a href="https://krausefx.com/blog/going-nomad" target="_blank">I live out of a suitcase</a>
  </p>
</footer>

<div class="social-media-list" id="social-media-list-bottom" style="float: left; margin-top: -133px;">
  <p>
    <b>Ideas or suggestions?</b><br />
    <span class="ideas-subtitle">I'd love to hear from you!</span>
  </p>
  <ul>
    <li>{% include icon-twitter.html username="KrauseFx" %}</li>
    <li>{% include icon-instagram.html %}</li>
    <li>{% include icon-url.html %}</li>
  </ul>
</div>
<br /><br />
<hr />

<div id="enlargedImageContainer" style="display: none">
  <div id="enlargedImageContainerBackground"></div>
  <a target="_blank" id="enlargedImageLink">
    <img id="enlargedImage" />
  </a>
  <p id="enlargedImageTitle" onclick="dismissImage()"></p>
</div>

<div id="arrow-left-button" class="arrow-button"></div>
<div id="arrow-right-button" class="arrow-button"></div>

<script type="text/javascript">
  // Subscribe to mouse wheel
  const imageLinks = document.getElementsByClassName("image-link")
  for (let i = 0; i < imageLinks.length; i++) {
    imageLinks[i].addEventListener("mousedown", function(event) {
      if (event.button === 1) { // 1 = center mouse button
        event.preventDefault()
        window.open(this.getAttribute("src"), '_blank');
      }
    })
  }

  let lastNode = null;

  function enlargeImage(node, img, title) {
    // Check if this is a center mouse click (Control or Meta Key)
    if (event.ctrlKey || event.metaKey) {
      window.open(img, '_blank');
      return;
    }

    // Check if it's already been the selected one
    if (lastNode == node.parentElement.parentElement) {
      showFullScreen(img, title);
      return;
    }

    if (lastNode) {
      lastNode.classList.remove("graph-entry-selected");
    }
    node.parentElement.parentElement.classList.add("graph-entry-selected");

    alignArrowKeys(node.parentElement.parentElement);

    // If we have a small screen, we also want to immediately use full-screen mode
    if (useMobileUI()) { 
      showFullScreen(img, title); 
    } else {
      node.parentElement.parentElement.scrollIntoView();
      window.scrollBy({ top: -15 });
    }

    lastNode = node.parentElement.parentElement;
  }

  function useMobileUI() {
    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    return width < 800;
  }

  function alignArrowKeys(node) {
    const arrowLeft = document.getElementById("arrow-left-button");
    const arrowRight = document.getElementById("arrow-right-button");
    if (node) {
      // Attach the arrows to be next to the `graph-entry-selected`
      const topPx = (node.offsetTop + 250 - arrowRight.offsetHeight / 2) + "px";

      arrowLeft.style.left = (node.offsetLeft - arrowLeft.offsetWidth - 10) + "px";
      arrowLeft.style.top = topPx;

      arrowRight.style.left = (node.offsetLeft + node.offsetWidth - arrowRight.offsetWidth + 50) + "px";
      arrowRight.style.top = topPx;
    } else {
      // This was the first or last graph, hide the arrow keys
      arrowLeft.style.left = "-100px";
      arrowRight.style.left = "-100px";
    }
  }

  function showFullScreen(img, title) {
    document.getElementById("enlargedImageContainer").style.display = "block";
    document.getElementById("enlargedImage").src = img;
    document.getElementById("enlargedImageLink").href = img;
    document.getElementById("enlargedImageTitle").innerHTML = title;
  }

  function dismissImage() {
    document.getElementById("enlargedImageContainer").style.display = "none";
  }

  function nextGraph() {
    if (lastNode) {
      lastNode.classList.remove("graph-entry-selected");
      lastNode = lastNode.nextElementSibling;

      if (lastNode) {
        lastNode.classList.add("graph-entry-selected");

        alignArrowKeys(lastNode)
        lastNode.scrollIntoView();        
        window.scrollBy({ top: -15 });
        clearSelection();
      } else { alignArrowKeys(lastNode); }
      return false;
    }
    return true;
  }
  function previousGraph() {
    if (lastNode) {
      lastNode.classList.remove("graph-entry-selected");
      lastNode = lastNode.previousElementSibling;
      if (lastNode) {
        lastNode.classList.add("graph-entry-selected");

        alignArrowKeys(lastNode)
        lastNode.scrollIntoView();        
        window.scrollBy({ top: -15 });
        clearSelection();
      } else { alignArrowKeys(lastNode); }
      return false;
    }
    return true;
  }

  function clearSelection() {
    // As sometimes the arrows get selected
    if (window.getSelection) {window.getSelection().removeAllRanges();}
    else if (document.selection) {document.selection.empty();}
  }

  document.getElementById("arrow-left-button").addEventListener("click", previousGraph);
  document.getElementById("arrow-right-button").addEventListener("click", nextGraph);
  document.getElementById("enlargedImageContainerBackground").addEventListener("click", dismissImage); // desktop browsers

  // so that mobile devices don't scroll 
  // Important to use `touchmove``, and not `touchstart`, as `touchstart` would be triggered for a regular click also
  // causing the user to click the element behind when trying to dismiss the image
  document.getElementById("enlargedImageContainerBackground").addEventListener("touchmove", dismissImage); 

  window.addEventListener('resize', function(event) {
    // Reposition the arrows
    alignArrowKeys(lastNode);
  }, true);

  window.addEventListener("keyup", function(e) {
    if (e.keyCode == 27) { // ESC
      if (document.getElementsByClassName("graph-entry-selected").length > 0 && document.getElementById("enlargedImageContainer").style.display == "none") {
        clearSelection();
        lastNode.classList.remove("graph-entry-selected");
        lastNode = null;
      }
      dismissImage();
      alignArrowKeys();
      return true;
    }

    // Use arrow keys
    if (e.keyCode == 37) { // Left key
      return previousGraph();
    }
    if (e.keyCode == 39) { // Right key
      return nextGraph();
    }
  }, false);
</script>

<style type="text/css">
  #graphs-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    margin-top: 10px;
  }
  #enlargedImageContainerBackground {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: -100;
  }
  #enlargedImageContainer {
    position: fixed;
    z-index: 100;
    top: 0;
    cursor: pointer;
    left: 0;
    right: 0;
    bottom: 0;
    height: 100%%;
    width: 100%%;
    text-align: center;
    padding-top: 40px;
  }
  #enlargedImage {
    background-color: green;
    object-fit: contain;
    max-height: calc(100% - 80px);
    max-width: 1200px;
  }
  @media (max-width: 1200px) {
    #enlargedImage {
      max-width: 100%;
      max-height: 100%;
    }
  }
  #enlargedImageTitle {
    color: white;
    font-size: 30px;
    font-weight: bold;
    margin-top: 20px;
    line-height: 1.2;
  }
  .graphs-entry {
    max-width: 470px;
    margin: 10px;
    border: 2px solid #e4e7ef;
    border-radius: 9px;
    padding: 20px;
  }
  .graphs-entry > ul > li {
    color: #555;
  }
  .graphs-entry > h3 {
    font-size: 140%;
  }
  .graph-description {
    color: #555;
  }
  .graph-sources-header {
    color: #555;
    font-weight: bold;
  }
  .graph-sources {
    color: #777;
  }
  .graph-date {
    float: right;
    color: #777;
    margin-top: 10px;
    font-size: 75%;
    margin-bottom: -10px;
  }
  .image-container {
    width: 100%;
    text-align: center;
  }
  .image-link {
    padding-top: 10px;
    cursor: pointer;
    max-height: 900px;
  }

  /* Real-Time Dashboard UI */
  #mapsContainer {
    width: 100%;
    height: 'auto';
    position: absolute;
    top: 0px;
    left: 0px;
    z-index: -1;
  }
  #currentLocationMap {
    width: 100%;
    background-position: center !important;
    background-size: cover !important;
    height: 230px;

    /* Show loading map by default while loading */
    background: url("/graphs/assets/loading-map.jpg") no-repeat;
  }
  #storyProfilePicture {
    width: 128px;
    height: 128px;
    border-radius: 70px;
    cursor: pointer;
    border: 4px solid #fff;
  }
  #story-available {
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    position: absolute;
    top: 158px;
    z-index: 10 !important;
  }
  #realTimeDataDiv {
    width: 100%;
    text-align: center;
    margin-bottom: -20px;
    padding-bottom: 10px;
    margin-top: 300px;
  }
  .blurred {
    filter: blur(5px);
  }
  .highlighted {
    font-weight: normal;
    background-color: rgba(255, 255, 0, 0.35);
    padding: 5px;
    margin-left: -5px;
  }
  #food-container {
    margin-bottom: 40px;
    margin-top: -20px;
  }
  #feels-h {
    margin-top: -15px;
    margin-bottom: 20px;
  }
  hr {
    border: 0;
    height: 1px;
    background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(40, 40, 40, 0.3), rgba(0, 0, 0, 0));
    margin-bottom: 35px;
    background-color: transparent !important;
  }
  .ago-subtle {
    color: #666;
    font-size: 14px;
  }
  #real-time-table {
    border: none;
  }
  #real-time-table > * > tr > td:first-child {
    text-align: right;
    white-space: nowrap;
  }
  #real-time-table tr {
    line-height: 16px;
    font-size: 88%;
  }
  #real-time-table tr .ago-subtle {
    font-size: 85%;
  }
  #real-time-table tr .highlighted {
    padding: 4px;
  }
  @media screen and (max-width: 800px) {
    #real-time-table tr {
      line-height: 12px;
    }
  }
  #table-container { 
    margin-top: 20px; 
    margin-left: auto; 
    margin-right: auto; 
    text-align: left; 
    width: 450px;
  }
  .git-footnote {
    text-align: center;
    color: #666;
    font-size: 14px;
  }
  #git-repo-link {
    text-decoration: none !important;
  }
  #git-header {
    margin-top: 10px;
    font-size: 25px;
    margin-bottom: 20px;
  }
  #git-header > a {
    color: #333 !important;
    font-weight: 400 !important;
    font-size: 90%;
  }
  @media screen and (max-width: 800px) {
    #current-weight-time {
      display: none;
    }
    #real-time-table > * > tr > td:first-child {
      width: 115px;
    }
  }
  @media screen and (max-width: 450px) {
    #real-time-table {
      max-width: 80%;
    }
  }
  .food-overview {
    line-height: 60px;
  }
  .food-overview > div {
    margin: 0 10px;
    display: inline-block;
    position: relative;
    text-align: center;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    width: 160px;
    height: 70px;
  }
  .macro-bar-outer {
    width: 110px;
    background-color: rgba(205, 205, 205, 0.5);
    height: 8px;
    border-radius: 5px;
    position: absolute;
    margin-top: 55px;
    margin-left: auto;
    margin-right: auto;
    left: 0;
    right: 0;
    text-align: center;
  }
  .macro-bar-inner {
    width: 0px;
    background-color: rgba(0, 220, 0, 1);
    height: 8px;
    border-radius: 5px;
  }
  #foodEntriesTable {
    border: none;
    max-width: 430px;
    margin-left: auto;
    margin-right: auto;
    white-space: nowrap;
  }
  #foodEntries {
    margin-top: 30px;
    width: 100%;
    text-align: center;
  }
  #foodEntriesTable tr {
    background-color: rgba(255, 255, 255, 0.9) !important;
    font-size: 90%;
    line-height: 1.35;
  }
  #foodEntriesTable tr > td {
    color: #669;
    padding: 9px 0 0;
    border: none;
    text-overflow: ellipsis;
    overflow: hidden;
  }
  #foodEntriesTable tr > td:first-child {
    max-width: 270px;
  }
  #foodEntriesTable tr > td:last-child {
    max-width: 80px;
    width: 80px;
  }
  .hidden-food {
    display: none;
  }
  #show-all-food-a {
    font-weight: bold;
    text-decoration: none;
    cursor: pointer !important;
  }
  .graph-entry-selected {
    max-width: 100%;
    border: 3px solid #00BFFF;
  }
  .arrow-button {
    position: absolute;
    height: 40px;
    top: calc(50% - 10px);
    cursor: pointer;
    top: -100px;
  }
  #arrow-right-button {
    content: url('/graphs/assets/source_icons_arrow-right-circled.svg');
  }
  #arrow-left-button {
    content: url('/graphs/assets/source_icons_arrow-left-circled.svg');
  }
  @media screen and (max-width: 800px) {
    #arrow-right-button {
      display: none;
    }
    #arrow-left-button {
      display: none;
    }
  }
  #nextCityContainer {
    margin-top: -10px;
  }
  #next-cities-table {
    display: none;
    margin-left: auto;
    max-width: 500px;
    margin-right: auto;
    border: none;
    margin-bottom: 0px;
    border-spacing: 4px;
    border-collapse: separate;
  }
  #next-cities-table > * > tr > th {
    color: #039;
    border-bottom: 1px solid #6678b1;
    padding: 5px 5px;
    border-top: 0;
    border-right: 0;
    text-align: center;
    border-left: 0;
    font-size: 14px;
    background-color: transparent;
    white-space: nowrap;
  }
  #next-cities-table > tr {
    background-color: transparent !important;
  }
  #next-cities-table > tr > td {
    color: #669;
    border: none;
    padding: 5px 20px 0px;
    background-color: transparent !important;
    white-space: nowrap;
  }
  @media screen and (max-width: 800px) {
    #next-cities-table > tr > td {
      padding: 0px 10px 0px;
    }
  }
  footer {
    margin-top: 30px;
  }
  footer > p {
    text-align: right;
    color: #777;
    margin-top: 0px;
    margin-bottom: 5px;
    font-size: 14px;
  }
  .imageCarousel {
    margin-top: 10px;
    height: 127px; /* this is important to prevent weird scrolling on iOS */
    width: 100%;
    overflow-y: none;
    overflow-x: scroll;
    white-space: nowrap;
  }
  .imageCarousel > a > img {
    height: 120px;
    width: auto;
    max-width: none; /* to override page wide attribute */
    display: inline-block;
  }
  #personalCarousel > a > span {
    /* I didn't spend the time investigating why this is necessary */
    margin-right: 5px;
    height: 120px;
    display: inline-block;
    width: 120px; /* IG pictures should always be square */
    background-size: cover;
    background-repeat: no-repeat;
    background-position: 50% 50%;
  }
  @media screen and (max-width: 1100px) {
    #data-sources-overview td {
      padding: 5px 10px;
    }
    #data-sources-overview th {
      padding: 5px 10px;
    }
  }
  @media screen and (max-width: 800px) {
    #data-sources-overview td {
      font-size: 90%;
    }
    #data-sources-overview th {
      font-size: 90%;
    }
  }
  #lifesheet-questions {
    height: 510px;
    float: right;
    margin-left: 20px;
    margin-bottom: 15px;
    margin-top: -70px;
  }
  @media screen and (max-width: 800px) {
    #lifesheet-questions {
      float: none;
      margin-top: 10px;
    }
  }
  #fx-user-link {
    color: #111 !important;
    text-decoration: none;
  }
  .social-media-list {
    border: 1px solid #ccc;
    border-radius: 5px;
    padding: 15px;
    padding-bottom: 0px;
    width: auto;
    height: auto;
  }
  .social-media-list p {
    margin-bottom: 10px;
    line-height: 1.5;
  }
  .social-media-list ul {
    list-style: none;
    margin-left: 0px;
  }
  .social-media-list li {
    color: #353535;
    font-size: 16px;
    font-weight: 400;
    line-height: 1.3;
  }
  .social-media-list a {
    text-decoration: none;
  }
  .social-media-list span {
    vertical-align: middle;
  }
  .social-media-list svg {
    color: #353535 !important;
  }
  .icon > svg {
    display: inline-block;
    vertical-align: middle;
  }
  .social-media-list .url-details {
    margin-left: 4px; /* no idea why this is needed */
  }
  .icon > svg path {
    fill: #828282;
  }
  .social-media-list .icon {
    padding-right: 5px;
  }
  .ideas-subtitle {
    color: #666;
  }
  @media screen and (max-width: 800px) {
    #social-media-list-bottom {
      float: right !important;
      margin-top: 10px !important;
      margin-bottom: 20px;
      margin-left: 15px;
    }
  }
  .graph-overview-footer {
    color: #777;
    text-align: left;
    font-size: 14px;
    margin-bottom: 0;
  }
</style>

<div class="footer-col footer-col-3">
  {% include newsletter.html %}
</div>

<script type="text/javascript">
  var links = document.links;
  for (var i = 0, linksLength = links.length; i < linksLength; i++) {
    if (links[i].hostname != window.location.hostname) {
      links[i].target = '_blank';
    } 
  }
</script>
